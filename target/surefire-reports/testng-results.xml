<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="1" total="8" passed="6" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-07-13T01:39:05 IST" name="Ecommerce Account Suite" finished-at="2025-07-13T01:41:45 IST" duration-ms="159061">
    <groups>
    </groups>
    <test started-at="2025-07-13T01:39:05 IST" name="Account Creation" finished-at="2025-07-13T01:41:45 IST" duration-ms="159061">
      <class name="testCases.CreateAccountTest">
        <test-method is-config="true" signature="setUp()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:39:05 IST" name="setUp" finished-at="2025-07-13T01:39:07 IST" duration-ms="1662" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:39:07 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-13T01:39:17 IST" duration-ms="9352" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With Blank Fields :   ()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[This is a required field.]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:39:17 IST" name="tearDown" finished-at="2025-07-13T01:39:20 IST" duration-ms="3226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:39:20 IST" name="setUp" finished-at="2025-07-13T01:39:21 IST" duration-ms="1103" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:39:21 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-13T01:39:42 IST" duration-ms="20738" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With In-Valid Email-Id : John Doe (invalidemail@)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Please enter a valid email address (Ex: johndoe@domain.com).]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:39:42 IST" name="tearDown" finished-at="2025-07-13T01:39:44 IST" duration-ms="2688" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:39:44 IST" name="setUp" finished-at="2025-07-13T01:39:46 IST" duration-ms="1145" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:39:46 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-13T01:40:06 IST" duration-ms="20441" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With In-Valid Password Of Length Less Than 8 : Jane Smith (jane.smith@test.com)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Minimum length of this field must be equal or greater than 8 symbols.]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:40:06 IST" name="tearDown" finished-at="2025-07-13T01:40:09 IST" duration-ms="2525" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:40:09 IST" name="setUp" finished-at="2025-07-13T01:40:10 IST" duration-ms="1065" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:40:10 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-13T01:40:38 IST" duration-ms="28807" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account Without Entering Confirm Password : Jack Black (jack.black1752350945984@mail.com)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Please enter the same value again.]]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Expected error not found: Please enter the same value again. expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Expected error not found: Please enter the same value again. expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1413)
at org.testng.Assert.assertTrue(Assert.java:56)
at assertions.AssertUtils.assertTrue(AssertUtils.java:14)
at testCases.CreateAccountTest.testNegativeAccountCreation(CreateAccountTest.java:56)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:308)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:71)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:113)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:40:39 IST" name="tearDown" finished-at="2025-07-13T01:40:41 IST" duration-ms="2617" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:40:41 IST" name="setUp" finished-at="2025-07-13T01:40:42 IST" duration-ms="1049" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:40:42 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-13T01:41:07 IST" duration-ms="24439" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With Existing Account : Existing User (existing.user@test.com)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[There is already an account with this email address.]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:41:07 IST" name="tearDown" finished-at="2025-07-13T01:41:09 IST" duration-ms="2568" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:41:09 IST" name="setUp" finished-at="2025-07-13T01:41:10 IST" duration-ms="1017" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:41:10 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-13T01:41:29 IST" duration-ms="18118" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With Invalid emailId and Password less than 8 Characters : !@# $%^ (wrong@format)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Please enter a valid email address (Ex: johndoe@domain.com)., Minimum length of this field must be equal or greater than 8 symbols.]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:41:29 IST" name="tearDown" finished-at="2025-07-13T01:41:31 IST" duration-ms="2745" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:41:31 IST" name="setUp" finished-at="2025-07-13T01:41:32 IST" duration-ms="1029" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:41:32 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-13T01:41:41 IST" duration-ms="8476" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With Blank Spaces :         (    )]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[This is a required field.]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:testCases.CreateAccountTest@73e9cf30]" started-at="2025-07-13T01:41:41 IST" name="tearDown" finished-at="2025-07-13T01:41:45 IST" duration-ms="3635" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- testCases.CreateAccountTest -->
    </test> <!-- Account Creation -->
  </suite> <!-- Ecommerce Account Suite -->
</testng-results>
