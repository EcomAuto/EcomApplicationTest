<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="1" total="8" passed="5" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-07-21T23:35:26 IST" name="Ecommerce Account Suite" finished-at="2025-07-21T23:47:37 IST" duration-ms="731256">
    <groups>
    </groups>
    <test started-at="2025-07-21T23:35:26 IST" name="Account Creation" finished-at="2025-07-21T23:47:37 IST" duration-ms="731256">
      <class name="testCases.CreateAccountTest">
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:35:26 IST" name="setUp" finished-at="2025-07-21T23:35:28 IST" duration-ms="1974" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:35:28 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-21T23:37:48 IST" duration-ms="140728" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With Blank Fields :   ()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[This is a required field.]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:37:48 IST" name="tearDown" finished-at="2025-07-21T23:37:49 IST" duration-ms="501" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNegativeAccountCreation status=SUCCESS method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:37:49 IST" name="setUp" finished-at="2025-07-21T23:37:50 IST" duration-ms="1283" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:37:50 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-21T23:40:50 IST" duration-ms="180040" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With In-Valid Email-Id : John Doe (invalidemail@)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Please enter a valid email address (Ex: johndoe@domain.com).]]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[java.util.concurrent.TimeoutException
Build info: version: '4.33.0', revision: '2c6aaad03a'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.11'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [de2f5487c8237c528fe8fd51cc541664, get {url=https://magento.softwaretestingboard.com/customer/account/create/}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 138.0.7204.101, chrome: {chromedriverVersion: 138.0.7204.94 (545025748884..., userDataDir: C:\Users\JYOTIP~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:49191}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:49191/devtoo..., se:cdpVersion: 138.0.7204.101, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: de2f5487c8237c528fe8fd51cc541664]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: java.util.concurrent.TimeoutException
Build info: version: '4.33.0', revision: '2c6aaad03a'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.11'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [de2f5487c8237c528fe8fd51cc541664, get {url=https://magento.softwaretestingboard.com/customer/account/create/}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 138.0.7204.101, chrome: {chromedriverVersion: 138.0.7204.94 (545025748884..., userDataDir: C:\Users\JYOTIP~1\AppData\L...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:49191}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:49191/devtoo..., se:cdpVersion: 138.0.7204.101, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: de2f5487c8237c528fe8fd51cc541664
at org.openqa.selenium.remote.http.jdk.JdkHttpClient.execute(JdkHttpClient.java:427)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:212)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:216)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:174)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:544)
at org.openqa.selenium.remote.RemoteWebDriver.get(RemoteWebDriver.java:312)
at testCases.CreateAccountTest.testNegativeAccountCreation(CreateAccountTest.java:51)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.util.concurrent.TimeoutException
at java.base/java.util.concurrent.CompletableFuture$Timeout.run(CompletableFuture.java:2874)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
... 3 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:42:51 IST" name="tearDown" finished-at="2025-07-21T23:42:51 IST" duration-ms="568" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNegativeAccountCreation status=FAILURE method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:42:51 IST" name="setUp" finished-at="2025-07-21T23:42:52 IST" duration-ms="1006" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:42:52 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-21T23:43:16 IST" duration-ms="24043" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With In-Valid Password Of Length Less Than 8 : Jane Smith (jane.smith@test.com)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Minimum length of this field must be equal or greater than 8 symbols.]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:43:16 IST" name="tearDown" finished-at="2025-07-21T23:43:17 IST" duration-ms="987" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNegativeAccountCreation status=SUCCESS method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:43:17 IST" name="setUp" finished-at="2025-07-21T23:43:18 IST" duration-ms="1029" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:43:18 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-21T23:45:10 IST" duration-ms="111677" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account Without Entering Confirm Password : Jack Black (jack.black1753121126110@mail.com)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Please enter the same value again.]]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Expected error not found: Please enter the same value again. expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Expected error not found: Please enter the same value again. expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1413)
at org.testng.Assert.assertTrue(Assert.java:56)
at assertions.AssertUtils.assertTrue(AssertUtils.java:14)
at testCases.CreateAccountTest.testNegativeAccountCreation(CreateAccountTest.java:63)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:840)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:45:10 IST" name="tearDown" finished-at="2025-07-21T23:45:11 IST" duration-ms="586" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNegativeAccountCreation status=FAILURE method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:45:11 IST" name="setUp" finished-at="2025-07-21T23:45:12 IST" duration-ms="1044" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:45:12 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-21T23:45:35 IST" duration-ms="22497" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With Existing Account : Existing User (existing.user@test.com)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[There is already an account with this email address.]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:45:35 IST" name="tearDown" finished-at="2025-07-21T23:45:35 IST" duration-ms="631" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNegativeAccountCreation status=SUCCESS method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:45:35 IST" name="setUp" finished-at="2025-07-21T23:45:36 IST" duration-ms="967" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:45:36 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-21T23:46:58 IST" duration-ms="81450" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With Invalid emailId and Password less than 8 Characters : !@# $%^ (wrong@format)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Please enter a valid email address (Ex: johndoe@domain.com)., Minimum length of this field must be equal or greater than 8 symbols.]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:46:58 IST" name="tearDown" finished-at="2025-07-21T23:47:00 IST" duration-ms="2075" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNegativeAccountCreation status=SUCCESS method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setUp(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:47:00 IST" name="setUp" finished-at="2025-07-21T23:47:01 IST" duration-ms="1032" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:47:01 IST" name="testNegativeAccountCreation" description="Verify error messages for invalid user registration inputs" data-provider="invalidUserData" finished-at="2025-07-21T23:47:35 IST" duration-ms="34549" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Creating Account With Blank Spaces :         (    )]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[This is a required field.]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNegativeAccountCreation -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:testCases.CreateAccountTest@534a5a98]" started-at="2025-07-21T23:47:35 IST" name="tearDown" finished-at="2025-07-21T23:47:37 IST" duration-ms="1515" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testNegativeAccountCreation status=SUCCESS method=CreateAccountTest.testNegativeAccountCreation(models.UserModel,java.util.List)[pri:0, instance:testCases.CreateAccountTest@534a5a98] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- testCases.CreateAccountTest -->
    </test> <!-- Account Creation -->
  </suite> <!-- Ecommerce Account Suite -->
</testng-results>
